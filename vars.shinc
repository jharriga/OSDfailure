#--------------------------------------------------------------------
# START GLOBAL VARIABLES
#

#------------------------
# Runtimes for various phases
unittime="m"                 # unit for time values (s=sec; m=min; h=hr)
failuretime="10"
recoverytime="60"
phasetime=$(( failuretime + recoverytime ))
pollinterval="1"             # pollceph.sh interval to check ceph status
sleeptime="2"                # CONSTANT always in seconds
#  Calculate runtime  (in sec)for COSbench workload XML file
if [ $unittime == "s" ]; then
    time_mult=1
elif [ $unittime == "m" ]; then
    time_mult=60
elif [ $unittime == "h" ]; then
    time_mult=3600
else
    echo "unknown unittime value in vars.shinc"; exit
fi
# Runtime (in sec) per workstage - added to RUNTESTxml.xml workload file 
runtime_sec=$(( (time_mult * phasetime) + sleeptime ))

# DEBUG - alternative time values for faster runtimes
#failuretime="1m"
#recoverytime="5m"

# auth_url connection point - used below in PCvalues_arr and RTvalues_arr
rgwURL="rgw:8080"

#------------------------
# writeXML.sh variables
PREPAREtemplate="XMLtemplates/TMPL_prepCluster.xml"
PREPARExml="prepWorkload.xml"
# fillCluster: pre-existing keys in the template file
declare -a PCkeys_arr=("PREPAREstorage_type"
                       "PREPAREtimeout"
                       "PREPAREretry"
                       "PREPAREauth_type"
                       "PREPAREconfig"
                       "PREPAREworkers"
                       "PREPAREsizes1"
                       "PREPAREsizes2"
                       "PREPAREsizes3"
                       "PREPAREnumobjs"
                       )
declare -a PCvalues_arr=("swift"           # storage type
                         "60000"           # timeout
                         "3"               # retries
                         "swauth"          # auth_type
                         # a bit messy since SED requires "/" be escaped
                         "username=johndoe:swift;password=EMPTY;auth_url=http:\/\/${rgwURL}\/auth\/1.0"
                         "24"              # number of workers
                         "c(64)KB"         # size1
                         "c(64)MB"         # size2
                         "c(1)GB"          # size3
                         "4020"            # number of objects
                         )

# RUNTEST settings
#RUNTESTtemplate="XMLtemplates/TMPL_hybrid.xml"
RUNTESTtemplate="XMLtemplates/TMPL_deleteWrite.xml"
RUNTESTxml="ioWorkload.xml"
# runtest: pre-existing keys in the template file
declare -a RTkeys_arr=("RUNTESTstorage_type"
                       "RUNTESTtimeout"
                       "RUNTESTretry"
                       "RUNTESTauth_type"
                       "RUNTESTconfig"
                       "RUNTESTworkers"
                       "RUNTESTruntime"
                       "RUNTESTsizes1"
                       "RUNTESTsizes2"
                       "RUNTESTsizes3"
                       "RUNTESTnumobjs"
                       )
declare -a RTvalues_arr=("swift"          # storage_type
                         "60000"          # timeout
                         "3"              # retries
                         "swauth"         # auth_type
                         # a bit messy since SED requires "/" be escaped
                         "username=johndoe:swift;password=EMPTY;auth_url=http:\/\/${rgwURL}\/auth\/1.0"
                         "96"              # workers
                         "${runtime_sec}"  # runtime in seconds
                         "c(64)KB"         # sizes1
                         "c(64)MB"         # sizes2
                         "c(1)GB"          # sizes3
                         "4020"            # number of objects
                         )
 
#------------------------
# PREPCLUSTER.sh variables
longPAUSE="90s"
pool_list=("default.rgw.users.keys" "default.rgw.data.root" ".rgw.root" "default.rgw.control" \
          "default.rgw.gc" "default.rgw.buckets.data" "default.rgw.buckets.index" "default.rgw.buckets.extra" \
          "default.rgw.log" "default.rgw.meta" "default.rgw.intent-log" "default.rgw.usage" "default.rgw.users" \
          "default.rgw.users.email" "default.rgw.users.swift" "default.rgw.users.uid")
numREPLICAS=3                # how many replicas
preparePTYPE=rep             # Must be rep OR ec
if [ $preparePTYPE == "rep" ]; then
    REPLICATION="rep"
    k=0
    m=0
    pg_data=8192
    pg_index=256
    pg=256
    fast_read=0
elif [ $preparePTYPE == "ec" ]; then
    REPLICATION="ec"
    k=4
    m=2
    pg_data=4096
    pg_index=256
    pg=256
    fast_read=0
else
    echo "Pool type needs to be defined as rep or ec in vars.shinc"; exit
fi

#------------------------
# RUNTEST.sh vars
# List of dependencies - verfied by 'chk_dependencies' function
DEPENDENCIES_arr=(
  "pbench-user-benchmark"    # monitoring framework
  "ceph"                     # ceph cmdline tool
  "ansible"                  # used to start/stop RGW svcs
  "systemctl"                # controlling ceph svcs
  )

# Ceph cluster node IP addresses
OSDhostname="10.12.70.112"
MONhostname="10.12.70.141"
RGWhostname="rgw"

# OSD network interfaces to be taken down
IFACE_arr=(
  "ens3f0"
  "ens3f1"
  )

# COSbench vars
cosPATH="/root/0.4.2.c4"

# Timestamp logfile
ts="$(date +%Y%m%d-%H%M%S)"

# Name of the program being run
PROGNAME=$(basename $0)

# LOGFILE - records steps
RESULTSDIR="./RESULTS"
LOGFILE="${RESULTSDIR}/${PROGNAME}_${ts}.log"
# Logfile date format, customize it to your wishes
#   - see man date for help
DATE='date +%Y/%m/%d:%H:%M:%S'

# END GLOBAL VARIABLES
#--------------------------------------------------------------------
